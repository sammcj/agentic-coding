<CHARM note="Rules and tips for developing Golang applications with the Charmbracelet (Lipgloss, Bubbletea, etc) family of packages">

## Popup and Overlay Rendering
When implementing popup overlays in Bubbletea applications using lipgloss, follow these patterns to avoid blank interface issues:

1. **Never replace the base view entirely** when showing popups - this causes the interface to go blank on subsequent popup displays
2. **Use lipgloss.Place() correctly** for overlays:
```go
// CORRECT - Simple overlay approach
if showPopup {
    popupBox := lipgloss.NewStyle().
        Border(lipgloss.RoundedBorder()).
        Background(lipgloss.Color("235")).
        Padding(1, 2).
        Render(popupContent)

    return lipgloss.Place(width, height,
        lipgloss.Center, lipgloss.Center,
        popupBox)
}
return baseView
```

3. **Avoid string concatenation** for overlay composition - it doesn't create proper overlays
4. **Keep popup state management simple** - use boolean flags and clear state appropriately
5. **Test popup behaviour**

### State Management
- Always validate array bounds before accessing display items: `if cursor >= len(displayItems) { return }`
- Reset cursor and viewport positions when changing directory contexts
- Use proper state transitions between loading, display, and popup modes

</CHARM>
