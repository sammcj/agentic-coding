<CLINE_RULES>
  - Start new task when context window exceeds 70% capacity
</CLINE_RULES>

<IMPORTANT_RULES>

  <CODING_STYLE note="**IMPORTANT**">
    <FAVOUR_SIMPLICITY>
      - CRITICAL: Favour elegance through simplicity - use a "less is more" approach with concise architecture, code structure and logic unless specified otherwise
      - Avoid over-engineering or unnecessary abstractions unless complexity genuinely warrants them
    </FAVOUR_SIMPLICITY>
    - Follow language and framework best practices
    - Use sensible variable defaults, parameterised as configuration options where appropriate
    - Always use the latest available package versions unless otherwise specified
    - Follow project's established architecture and patterns
    -  Typography: Use variables for common font properties such as colour and make use of the variables throughout the codebase rather than hard coding font colours. Ensure you use darker text on light backgrounds and vice versa for accessibility
    - ALWAYS use a .env or config file as a single source of truth for configuration values
  </CODING_STYLE>

  <GOLANG note="Rules for golang projects">
  - Use os and io packages instead of deprecated io/ioutil
  - Build with -ldflags="-s -w" to reduce binary size
  - If the user asks you to create an application using the "charm" family of packages, use your tools to read the documentation and implementation examples for the relevant charmbracelet packages to ensure you are using them correctly
  - When writing golang you can use the 'modernize' command to aid with modernising code: `go run golang.org/x/tools/gopls/internal/analysis/modernize/cmd/modernize@latest -fix -test ./...`
  - When creating new golang applications always check and use the latest golang version, not what you *think* is the latest version
  </GOLANG>

  <JAVASCRIPT_TYPESCRIPT note="Rules for JS, TS and other web frontend frameworks">
    - Never hardcode element or font sizes, colours etc. into the code, instead always use variables from a central theme or configuration file
    - Ensure styles are consistent and follow a coherent design system
    - Avoid complexity with Javascript and Typescript - avoid unnecessary abstractions, frameworks and excessively heavy design patterns
    - Only log what is truly needed to the console, avoid excessive console logging
  </JAVASCRIPT_TYPESCRIPT>

  <BASH note="Rules for shell scripts">
  - In shell scripts you must define and set variable values separately, group their definition on a single line where it makes sense to do so.
  </BASH>

  <WORKFLOW note="**IMPORTANT** you must follow this workflow for all tasks unless directly instructed otherwise by the user">
  - IMPORTANT: Edit only what's necessary! Make minimal changes to existing structures unless instructed
  - **You MUST NOT EVER state something is fixed unless you have confirmed it is by means of testing or measuring output and building the application**
  - Avoid adding too many comments, you ONLY need comments on complex logic that cannot be inferred
  - Run make lint/format/test/build if available after completing tasks
  - If working from a dev plan or checklist - you **MUST** check off tasks as they are completed to 100%, if you cannot be sure they are truly complete - do not state they are complete!
  - If you are stuck on a persistent problem that you and the user have tried to fix several times, suggest to the user that they can run the `/systematic-debugging-when-stuck` command to perform a fagan inspection
  - Use Australian/British English spelling in all communication, comments and code
  - Create a todo lists when working on complex tasks to track progress and remain on track
  - You **MUST** fix all failing tests before marking task complete
  - If the user asks you to ensure the code builds you **MUST** ensure you run a build or any other related commands before stating you've completed the work.
  </WORKFLOW>

  <DO_NOT_WASTE_TOKENS note="**IMPORTANT**: Being economical with tokens is always important">
    - Be succinct and concise - don't waste tokens
    - Combine multiple, file edits to the same file where possible
  </DO_NOT_WASTE_TOKENS>

  <NEVER_DO_THESE note="**IMPORTANT**">
    - NEVER perform git add/commit/push operations
    - NEVER hardcode credentials, unique identifiers or localhost URLs
    - NEVER add comments pertaining only to development process (e.g. "improved function", "optimised version", "# FIX:", "enhanced function" etc...)
    - NEVER claim an issue is resolved until user verification - This is very important, you *MUST* confirm an issue truly is fixed before stating it is fixed!
    - NEVER implement placeholder or mocked functionality unless explicitly instructed - don't be lazy!
    - NEVER build or develop for Windows - we do not ever need or want Windows support
  </NEVER_DO_THESE>

  <TOOL_USE note="**IMPORTANT**">
    - CRITICAL: Prioritise available tools over manual approaches and use tools to reduce token usage
    - If you stuck don't just keep making things up - use the tools available to you to lookup package documentation or search the web
    - Using purpose built tools is often a better approach than searching the web (e.g. using get_library_docs for library documentation)
    - Keep files under 700 lines - split if longer, if you are asked to split large files and you have access to the find_long_files tool, use it to help identify potential targets
    - When asked to do math that's more than adding one or two items, use the calculator tool to ensure accuracy
  </TOOL_USE>

  <CONTRIBUTING_TO_OPEN_SOURCE when="If the user states they are contributing to an open source project">
    - You MUST align to the style of the existing code and you MUST follow the project's contribution guidelines and coding standards, start by reading CONTRIBUTING.md or similar files in the repository
    - **IMPORTANT: You MUST NOT add placeholder comments or code!**
  </CONTRIBUTING_TO_OPEN_SOURCE>

  <DOCUMENTATION_RULES note="IMPORTANT">
    - When writing documentation, keep the focus technical and concise.
    - There's more value in detailing configuration and examples than showcasing features.
    - When writing content ask yourself 'What is the value that this is adding?'
    - Avoid using the terms 'comprehensive', 'enhanced', 'improved', 'production grade' etc.. - they are overused by AI coding assistants and add no real value
    - You MUST avoid marketing language, superlatives and self congratulatory statements
  </DOCUMENTATION_RULES>

</IMPORTANT_RULES>
