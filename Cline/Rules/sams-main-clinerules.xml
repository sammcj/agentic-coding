
<IMPORTANT_RULES>

  <CODING_STYLE note="IMPORTANT">
    <FAVOUR_SIMPLICITY>
      - CRITICAL: Favour elegance through simplicity - use a "less is more" approach with concise architecture, code structure and logic unless specified otherwise
      - Avoid over-engineering or unnecessary abstractions unless complexity genuinely warrants them
    </FAVOUR_SIMPLICITY>
    - Follow language and framework best practices
    - Use sensible variable defaults, parameterised as configuration options where appropriate
    - Always use the latest available package versions unless otherwise specified
    - Follow project's established architecture and patterns
    - Do not build for Windows - we do not ever need or want Windows support
    -  Typography: Use variables for common font properties such as colour and make use of the variables throughout the codebase rather than hard coding font colours. Ensure you use darker text on light backgrounds and vice versa for accessibility.
  </CODING_STYLE>

  <GOLANG>
  - Use os and io packages instead of deprecated io/ioutil
  - Build with -ldflags="-s -w" to reduce binary size
  - If the user asks you to create an application using the "charm" family of packages, use your tools to read the documentation and implementation examples for the relevant charmbracelet packages to ensure you are using them correctly
  - When creating new golang applications always check and use the latest golang version, not what you *think* is the latest version
  </GOLANG>

  <BASH>
  - In shell scripts you must define and set variable values separately, group their definition on a single line where it makes sense to do so.
  </BASH>

  <WORKFLOW note="IMPORTANT">
  - Edit only what's necessary
  - Make minimal changes to existing structures unless instructed
  - Avoid adding too many comments, you ONLY need comments on complex logic
  - Run make lint/format/test/build if available after completing tasks
  - You MUST fix all failing tests before marking task complete
  - Check off dev plan checklist tasks as completed
  - Don't ever state something is fixed unless you have confirmed it is by means of testing or measuring output or if the user has confirmed
  - Use Australian/British English spelling in all communication, comments and code
  </WORKFLOW>

  <DO_NOT_WASTE_TOKENS note="IMPORTANT">
    - Be succinct and concise - don't waste tokens
    - Combine multiple, nearby changes where possible
  </DO_NOT_WASTE_TOKENS>

  <NEVER_DO_THESE note="IMPORTANT">
    - NEVER perform git add/commit/push operations
    - NEVER hardcode credentials or unique identifiers
    - NEVER add comments pertaining only to development process (e.g. "improved function", "optimised version", "# FIX:")
    - NEVER claim an issue is resolved until user verification
    - NEVER implement placeholder or mocked functionality unless explicitly instructed - don't be lazy!
  </NEVER_DO_THESE>

  <TOOL_USE note="IMPORTANT">
    - CRITICAL: Prioritise available tools over manual approaches and use tools to reduce token usage
    - If you stuck don't just keep making things up - use the tools available to you to lookup package documentation or search the web
    - Using purpose built tools is often a better approach than searching the web (e.g. using get_library_docs for library documentation)
    - Keep files under 700 lines - split if longer, if you are asked to split large files and you have access to the find_long_files tool, use it to help identify potential targets
    - When asked to do math that's more than adding one or two items, use the calculator tool to ensure accuracy
  </TOOL_USE>

  <CONTRIBUTING_TO_OPEN_SOURCE when="If the user states they are contributing to an open source project">
    - You MUST align to the style of the existing code and you MUST follow the project's contribution guidelines and coding standards, start by reading CONTRIBUTING.md or similar files in the repository
    - You MUST NOT add placeholder comments or code
  </CONTRIBUTING_TO_OPEN_SOURCE>

  <DOCUMENTATION_RULES note="IMPORTANT">
    - When writing documentation, keep the focus technical and concise.
    - There's more value in detailing configuration and examples than showcasing features.
    - When writing content ask yourself 'What is the value that this is adding?'
    - Avoid using the term 'comprehensive' - it is overused.
    - You MUST avoid marketing language, superlatives and self congratulatory statements
  </DOCUMENTATION_RULES>

  <CLINE_RULES>
    - Start new task when context window exceeds 70% capacity
  </CLINE_RULES>

</IMPORTANT_RULES>
